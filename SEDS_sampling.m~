clear; close all; clc;

load CurrentTest.mat
demo = DataStruct.demo;
demo_struct = DataStruct.demo_struct;

%% Pre-porcessing options
process_options.tol_cutting = 1.;
process_options.dt = 0.1;

%% Draw
draw_options.plot_pos = true;
draw_options.plot_vel = false;
[X, targets] = ProcessDemos(demo, 2, demo_struct, process_options);
[fig_pos] = DrawData(X, targets, draw_options);

%% Separate Dynamics
counter = 1;
dynamics = struct(strcat('ds',num2str(counter)),demo(1));
dynamics.ds1 = {dynamics.ds1, demo{2}};
prev_dyn = 0;

for i = 3:length(demo)
    if counter ~= demo{i}(end,1)
        prev_dyn = i-1;
    end
    counter = demo{i}(end,1);
    dynamics.(strcat('ds',num2str(counter))){i-prev_dyn} = demo{i};    
end

%% SEDS options
K = 6;                        % Number of Gaussian funcitons
options.tol_mat_bias = 10^-6; % Small positive scalar to avoid instabilities in Gaussian kernel
options.display = 1;          % Displays the output of each iterations
options.tol_stopping=10^-10;  % Stoppping tolerance
options.max_iter = 500;       % Maximum number of iteration for the solver [default: i_max=1000]
options.objective = 'mse';    % use mean square error as criterion to optimize parameters of GMM

process_options.center_data = true;

%% Simulation options
opt_sim.dt = 0.1;
opt_sim.i_max = 3000;
opt_sim.tol = 0.1;

fields = fieldnames(dynamics);

demos_sim = cell(length(demo),1);

cell_index = 1;
curr_label = 1;

for i=1:length(fields)
    curr_demo = dynamics.(fields{i});
    for j = 1 : length(curr_demo)
        curr_demo{j}(3,:) = 1;
    end
    [X, targets, index] = ProcessDemos(curr_demo, 2, demo_struct, process_options);
    % [X, targets] = ProcessDemos(demo, 2, demo_struct, process_options);
% [fig_pos] = DrawData(X, targets, draw_options);

    Data = X(1:end-1,:);
    [Priors_0, Mu_0, Sigma_0] = initialize_SEDS(Data,K);
    [Priors, Mu, Sigma]=SEDS_Solver(Priors_0,Mu_0,Sigma_0,Data,options);
    
    d = size(Data,1)/2;
    x0_all = Data(1:d,index(1:end-1)); %finding initial points of all demonstrations
    fn_handle = @(x) ml_gmr_mod(Priors,Mu,Sigma,x,1:d,d+1:2*d);
    [x, xd]=Simulation(x0_all,[],fn_handle,opt_sim); %running the simulator
    for j = 1 : size(x,3)
       demos_sim{cell_index} = [x(:,:,j)+targets'; ones(1,size(x(:,:,j),2))*curr_label];
       cell_index = cell_index + 1;
    end
    curr_label = curr_label + 1;
end

%%
process_options.center_data = false;
[X, targets] = ProcessDemos(demos_sim, 2, demo_struct, process_options);

x_i = X(1:2,:)';
v_i = X(3:4,:)';
v_norm = v_i./vecnorm(v_i,2,2);
v_norm(isnan(v_norm)) = 0;
l_i = X(5,:)';
[m,~] = size(x_i);

draw_options = struct('plot_pos', true, ...  % Draw the demonstrated positions
                      'plot_vel', false ...  % Draw the demonstrated velocities
                      );
fig_pos2 = DrawData([x_i'; v_i'./vecnorm(v_i,2,2)'; l_i'], targets, draw_options);